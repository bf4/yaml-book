== YAML - A Language for Data

My friend and colleague Steve Howell used to repeat, "Programming is
just about moving data from here (he holds his hands out to the left and
moves them to the right with a dry, sardonic chuckle) to there". I've
always been of the notion that the better organized your data becomes,
the more minimal and beautiful the programs you write to move it from
one place to the other, can be.

YAML is primarily a Language for Data. There are, of course, many
ways to encode data into a serialized (and even human readable) form.
That's not what I'm talking about. Just as natural languages are
about communicating ideas from person to person, and computer
languages are about communicating instructions from people to
computers, YAML is a _language_ for communicating the meaning of
data. This communication can be:

----------------------------------------------------------------------
include::chapters/code-examples/Modern/between.yaml[]
----------------------------------------------------------------------

If you've never seen YAML before, well... trust me... you actually
_have_ seen YAML before. The list just above this paragraph is a
complete and well formed YAML document. To a computer, it represents an
array of unicode character strings. To an everyday reader like yourself,
it's a list of bullet points.

This is the inherent beauty of YAML. Data can be communicated simply,
concisely and accurately to both the computers and people.

=== Modern Data and Programming Languages

When I studied Computer Science back in the prehistoric days (I
was actually a COBOL teaching assistant and wrote my first Fortran
programs on punch cards), we learned about many different dara
structures. Things like binary trees, hashed arrays and doubly linked
lists. I got the idea that most of my computer career would be about
learning new and more powerful data structures.

When I put my mainframe assembler days to rest, and entered the
brave new world of Perl and other dynamic, modern languages, I was
amazed that the exact opposite was true. These new languages had
boiled everything down to 2 kinds of collections: hashes (aka
dictionaries, objects, associative arrays, or mappings) and arrays
(aka lists or sequences). That's it. If you wanted anything else, you
could build it up from these two types. In practice though, you never
needed to.

As I became more familiar with these modern languages, I was
impressed that this view of the world was not a shortcut or cheap way
out. It was a primary pillar of strength. If all data was shaped in
these simple ways, then simpler programming seemed imminent.

=== What is a YAML?

x

x
