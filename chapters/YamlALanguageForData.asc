== YAML - A Language for Data

My friend and colleague Steve Howell used to always say, "Programming is
just about moving data from here (he holds his hands out to his left
side and moves them over to his right with a dry, sardonic chuckle) to
there". I've always been of the notion that the better organized your
data becomes, the more minimal and beautiful the programs you write, to
move it from one place to the other, can be.

YAML is a _Language_ for _Data_. There are, of course, many ways to
encode data into a serialized (and even human readable) form. That's
not what I'm talking about. Just as natural languages are about
communicating ideas from person to person, and computer languages
are about communicating instructions from people to computers, YAML
is a _language_ for communicating the meaning of data. This
communication can be:

----------------------------------------------------------------------
include::code-examples/Modern/between.yaml[]
----------------------------------------------------------------------

If you've never seen YAML before, well... trust me... you actually
_have_ seen YAML before. The list just above this paragraph is a
complete and well formed YAML document. To a computer, it represents an
array of unicode character strings. To an everyday reader like yourself,
it's a list of bullet points.

This is the inherent beauty of YAML. Data can be communicated simply,
concisely and accurately to both the computers and people.

=== Modern Data and Programming Languages

When I studied Computer Science back in the prehistoric days (I was
actually a COBOL teaching assistant and wrote my first Fortran programs
on punch cards), we learned about many different data structures. Things
like binary trees, hashed arrays and doubly linked lists. I got the idea
that most of my computer career would be about learning new and more
powerful data structures.

When I put my IBM mainframe assembler days to rest, and entered the
brave new world of Perl and other dynamic, modern languages, I was
amazed that the exact opposite was true. These new languages had
boiled everything down to 2 kinds of data collections: hashes (aka
dictionaries, objects, associative arrays, or mappings) and arrays
(aka lists or sequences). That's it. If you wanted anything else, you
could build it up from these two types. In practice though, you never
needed to.

As I became more familiar with these modern languages, I was impressed
that this view of the world was not a shortcut or cheap way out. It was
a primary pillar of strength. If all data was shaped in these simple
ways, then simpler programming seemed imminent.

=== What is a YAML?

*YAML* (it rhymes with "camel") is a Cross Programming Language, Human
Readable/Meaningful/Editable, Data/Object _Serialization Language_. In
other words, YAML is a format that lets you put any data object into a
text file and feed it to a Ruby [or Perl or Python or Java] program or
show it to a coworker or email it to your mom, and have all of them be
able to understand and play with it.

Consider this YAML object:

----------------------------------------------------------------------
recipients:
  languages:
  - Ruby
  - Python
  - Perl
  - Java
  people: [ Mom, My boss ]
features:
- Cross Programming Language
- Human: [ Readable, Meaningful, Editable ]
----------------------------------------------------------------------

If you are an experienced geek, you probably think that YAML is an
acronym for "Yet Another Markup Language". Good guess. Unfortunately,
it's wrong!

YAML is a recursive acronym for "YAML Ain't Markup Language". Why?
Because it ain't! If you look at Wikipedia, and read the first sentence
of these articles, you'll see the difference:

----------------------------------------------------------------------
XML: is a ... markup language
JSON: is a ... data interchange format
YAML: is a ... data serialization format
----------------------------------------------------------------------

When the YAML project first got started in 2001, when Clark Evans and
Oren Ben-Kiki were trying to make a simpler, friendlier XML. When I
joined up with them, a bit later, we soon realized that what we were
making was not a markup language (a way to markup text data), but
instead a language to store the data structures that were common in our
favorite programming languages. [The O'Reilly/OSCON Languages]

Unfortunately we already had the name "Yet Another Markup Lanugage"
acronym, but like any good group of geekly guys, we were able to
backronym our way out of it.

When XML came out, people tried to push it as far as would go.
Unfortunately it was not at all suited for general data serialization.
For instance, XML represents a tree structure, which can't (without some
serious mischief) represent a cyclic graph. That was a deal breaker for
a serialization language.

XML also left a bad taste in the mouth for things like config files.
Consider Apache config files. They have a great similarity to XML, but
they take a lot of liberties (to abandon strict XML), that make them
actual usable by regular people.

JSON is also mentioned because it is actually much closer to YAML than
XML is. (More about that in Chapter 2) JSON is extremely lightweight and
useful for passing around simple data structures. Unfortunately (like
XML) it has no way to represent cyclic data references and it has no way
to represent anything but the most common data types. YAML solves both
of these issues (and a couple others) in order to be able to serialize
any data structures. YAML is also less verbose than JSON.


