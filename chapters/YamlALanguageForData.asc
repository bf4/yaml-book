== YAML - A Language for Data

My friend and colleague Steve Howell used to always say, "Programming is
just about moving data from here (he holds his hands out to the left
and moves them over to the right with a dry, sardonic chuckle) to
there". I've always been of the notion that the better organized your
data becomes, the more clean and beautiful the programs you write (to
move it from one place to the other) can be.

YAML is a _Language_ for _Data_. There are, of course, many ways to
encode data into a serialized (and even human readable) form. That's
not what I'm talking about. Just as natural languages are about
communicating ideas from person to person, and computer languages
are about communicating instructions from people to computers, YAML
is a _language_ for communicating the meaning of data. This
communication can be:

[[between_yaml]] 
----
- From Human to Computer
- From Computer to Human
- From Computer to Computer
- From Human to Human
----

If you've never seen YAML before, well... trust me... you actually
_have_ seen YAML before. The list just above this paragraph is a
complete and well formed YAML document. To a computer, it represents an
array of unicode character strings. To an everyday book reader like
yourself, it's a list of bullet points.

This is the inherent beauty of YAML. Data can be communicated simply,
concisely and accurately to both the computers and people.

=== Modern Data and Programming Languages

When I studied Computer Science back in the prehistoric days (I was once
actually a COBOL teaching assistant and I wrote my first Fortran
programs on punch cards), we learned about many different data
structures. Things like binary trees, hashed arrays and doubly linked
lists. I got the idea that most of my computer career would be about
learning new and more powerful data structures.

When I put my IBM mainframe assembler days to rest, and entered the
brave new world of Perl and other dynamic, modern languages, I was
amazed that the exact opposite was true. These new languages had
boiled everything down to 2 kinds of data collections: hashes (aka
dictionaries, objects, associative arrays, or mappings) and arrays
(aka lists or sequences). That's it. If you wanted anything else, you
could build it up from these two types. In practice though, you never
needed to.

As I became more familiar with these modern languages, I was impressed
that this view of the world was not a shortcut or a cheap way out. It
was a primary pillar of strength. If all data was shaped in these simple
forms, then simpler programming seemed imminent.

=== What is a YAML?

*YAML* (it rhymes with "camel") is a Cross Programming Language, Human
Readable/Meaningful/Editable, Data/Object _Serialization Language_. In
other words, YAML is a format that lets you put any data into a text
file and feed it to a Ruby [or Perl or Python or Java] program or show
it to a coworker or email it to your mom, and have all of them be able
to understand and play with it.

Consider this YAML object:

[[yaml_attributes_yaml]] 
----
---
recipients:
  languages:
  - Ruby
  - Python
  - Perl
  - Java
  people: [ Mom, My boss ]
features:
- Cross Programming Language
- Human: [ Readable, Meaningful, Editable ]
----

If you are an experienced geek, you probably think that YAML is an
acronym for "Yet Another Markup Language". Good guess. Unfortunately,
it's wrong!

YAML is an acronym for "YAML Ain't Markup Language". Why? Because it
ain't! HTML and XML are _markup languages_. They inject further meaning
into otherwise ordinary text. These sentences form a citation, these
words should blink in a browsers and this phrase is a link to another
document. YAML, by contrast, is a _serialization language_, a way to
express computer data structures as a stream of characters.

When the YAML project first got started in 2001, Clark Evans and Oren
Ben-Kiki were trying to make a simpler, friendlier XML. When I joined up
with them, soon after, we quickly realized that what we were making was
not a markup language (a way to markup text data) at all, but instead a
language to store the data structures that were common in our favorite
programming languages.

// Talk about "The O'Reilly/OSCON Languages"

We already had the "Yet Another Markup Lanugage" acronym, and we loved
the sound of the word "YAML", but the meaning of it was incorrect. We
solved this quandry (like any good group of geekly guys) with a clever
backronym. We even made it a recursive one in the spirit of GNU. YAML
Ain't Markup Language (it's Serialization Language)!

=== Data, Data Structures and Databases 

.

=== Hashes, Arrays and Scalars 

.

=== Modern Programming Languages 

.

=== Types and Objects 

.

=== Data References 

.

=== Human Readability 

.

=== YAML, XML and JSON 

If you look at Wikipedia, and read the first sentence of these
articles, you'll see the difference:

[[xml_json_yaml_yaml]] 
----
XML: is a ... markup language
JSON: is a ... data interchange format
YAML: is a ... data serialization format
----

When XML came out, people tried to push it as far as it would go. The
stated goal of XML was to bring SGML to the web, but programmers wanted
to try on for size to move data objects around. Unfortunately it was not
at all suited for general data serialization.

The main problem is that the "shape" of XML encoded data (decorated tree
structures) didn't match well with the shapes in modern programming
languages: hashes and arrays. The way around this was to invent use the XML
DOM. Unfortunately, Perl and Python would never use a DOM (unless they had to
deal properly with XML documents).

For instance, XML represents a tree structure, which can't (without some
serious mischief) represent a cyclic graph. That was a deal breaker for
a serialization language.

XML also left a bad taste in the mouth for things like config files.
Consider Apache config files. They have a great similarity to XML, but
they take a lot of liberties (to abandon strict XML), that make them
actual usable by regular people.

JSON is also mentioned because it is actually much closer to YAML than
XML is. (I'll talk much more about that in XXX) JSON is extremely
lightweight and useful for passing around simple data structures.
Unfortunately (like XML) it has no way to represent cyclic data
references and it has no way to represent anything but the most common
data types. YAML solves both of these issues (and a couple others) in
order to be able to serialize any data structures. YAML is also less
verbose than JSON.

// Now that this section is at the end of the chapter, we can talk about the
// JSON subset stuff.
