== The YAML Data Language

The YAML Data Format – Like the Camel book for Perl, this chapter has
the “Gory Details” and is definitely the primary reference part of
the book. The chapter starts with the basics, but then systematically
covers all the YAML syntax and semantics in depth.

=== Simple Collections 

.

=== Comments 

.

=== Block vs Flow 

.

=== Streams and Documents 

.

=== Scalars - TMTOWTDI 

Scalars are single, simple data values, like numbers and strings. One of
the most beautiful and differentiating features of YAML is that it gives
you several ways to express string data. This is important because
strings come in many different sizes and shapes.

YAML rarely requires you to quote strings. You only need to quote them if
their content conflicts with the YAML syntax, which is pretty rare. Quotation
marks visual clutter up complex data. Since YAML's primary design goal is
human friendly readability, the designers worked hard to minimize quotes.

Consider the following example:

----
old person: Rip van Winkle
age: 42
url: http://winkle.net
quote: Rip said, "I'm tired"
----

This document is a simple mapping of 3 key/value pairs. The first pair of
strings has space in both the key and value. YAML is not confused. It knows
that that the key stops at the colon+space and that the value stops at the end
of the line. The second value is a number. Quoting would have YAML read it as
a string value, which visually makes sense. The third value is a url which
contains a colon, but since the colon has no space right after it, YAML is not
confused. The final value contains quotes itself, but since the value does not
start with a quote, there's no ambiguity.

Here are some examples of when quoting is required:

----
leading or trailing spaces: '  stuff and such '
escaped characters: "like a tab\tand a newline\n"
number is a string: '90210'
contains colon/space: 'why: because we like you'
starts with a YAML char: '*neato*'
----

As you can see above, there are 3 ways to write scalars: Unquoted, Single
Quoted and Double Quoted. As it turns out, YAML offers two more scalar styles.
The following sections describe each quoting style in detail, describing when
they are used, what their special properties are and also when they are 

==== Unquoted

Unquoted scalars are the most common way to express string values in YAML, but
there's actually more to leaving the quotes off than you might think. 

Unquoted scalars are subject to a property called implicit typing, which I'll
describe in more detail later in this chapter. The gist of it is that things
that look like numbers become numbers, things that look boolean are indeed
boolean and most everything else is a string by default.

----
a number: 123
numeric string: '8675309'
boolean: true
just a word: 'true'
a string: is a string, of course, of course
complex, but just a string: /^(foo|ba[rz])? .*$/
multiline: one   two
  three
    four
----

In the last pair, the value spans 2 lines (due to indentation), and is
parsed as `"one   two three four"`. This is due to YAML's whitespace
folding rules. Similar to HTML, newlines in the middle of a scalar (and their
adjacent space characters) are replaced by a single space. The 3 spaces
between "one" and "two" are not collapsed, however.

NOTE: Unquoted strings that are used as mapping keys have a length limit of
1024 Unicode characters. This limitation was put in place to ease parser
implementation. See the YAML spec (http://www.yaml.org/spec/1.2/) for details.

==== Single Quoted

If you need to quote something, single quotes are usually the simplest
way to do it. Unlike double quotes, there are no special character
sequences or escaping, save one: "if you need a single quote character
inside a single quoted string, use 2 single quotes". Otherwise
everything you see is what you get.

----
numeric string: '2468'
significant space: '   Dear John,'
quote in quote: ' Sorry, we''re through.'
multiline: 'One, two
buckle my shoe'
----

Multiline single quoted scalars are also subject to whitespace folding, but
they do not require indentation to continue the line.

==== Double Quoted

.

==== Literal Block Strings

.

==== Folded Block Strings

.

=== Data Types 

.

=== YAML Tags and Explicit Typing 

.

=== Implicit Typing 

.

=== Aliases and Anchors - (References and Recursion) 

.

=== Complex Keys 

.

=== Sets and Ordered Mappings 

.

=== YAML Specification Numbering 

.
