== The YAML Data Language

YAML is a very expressive language. Even though most of the YAML you run
into on a daily basis might seem simple, even to the point of being
trivial, YAML has rich set of syntactic features that allow you to
express data the way it looks best to you.

Data comes in many shapes and sizes. Many data formats are builtin
around a small set of primitives, that are then fitted and often coerced
into describing the complex data at hand. YAML started from the
perspective of a broad set common data patterns. What do they feel like?
What are the nicest ways to look at them? How can I convey this data
accurately, yet in a form that is also beautiful? Like Perl has famously
claimed, YAML makes "simple things simple, and hard things possible".

This chapter will takes you through all of the YAML syntax features, and
explain each one clearly with lots of examples. I'll take care to
explain the features not only from a technical perspective, but also
from a practical, every day use case point of view.

=== Overview of Terminology

It seems that every programming language chose to use a slightly
different set of terms to describe the same concept. For example, Perl
has the _hash_, but in Python they call it a _dictionary_ or _dict_ for
short, and in JavaScript it's an _object_. YAML has its own nomenclature
for describing data concepts. It was chosen carefully, and takes the
best words from various places including programming langauges and
mathematical set theory. I will use these terms consistently throughout
this chapter, and throughout the rest of the book.

Before we dive into describing each term in detail, allow me to give you
a whirlwind tour of the vocabulary.

All YAML texts are called _streams_. A stream is a sequential list of
zero or more _documents_. A document is the serialization of a _node_. A
node can be a _collection_ (of more nodes) or a single _scalar_. There
are two types of collections, _mappings_ and _sequences_. A mapping is a
set of _key_ / _value pairs of nodes, while a sequence is simply an
ordered list of nodes.

Each node has a _type_. There are two kinds of types, _explicit_ and
_implicit_. Explicit types use the YAML _tag_ system, while implicit
types are assigned an assumed tag based on their content and position in
the node _graph_. Each unique node has an _identity_. If a unique node
shows up in more than one place in the graph, YAML provides named
_anchors_ and _aliases_ to _reference_ them.

If that seems like a lot of new terminology to you, fear not. All of it
will be fully explained in the following sections. That's not even all
of it, but it should be enough to get you going. At the end of the book
there is a complete glossary that defines all of these terms.

=== Streams and Documents 

YAML, at the lowest conceptual level, is just a long string of printable
Unicode characters. This string might exist on a disk, stored as a text
file. It might be a message between a client and a server flowing across
the internet. It might be scribbled on scrap of paper that is crumpled
up in your back pocket.

Whatever state its in, YAML calls these strings, _streams_. A stream
usually has a beginning and an end, but it could be a unterminating
sequence of messages as well.

Consider the following YAML stream:

----
--- !todo-list
- Walk the dog
- Feed the cat
- Swim the fish
...
--- !poem
There once was format called YAML,
That likened itself to a mammal.
Its loads and its dumps,
Formed wonderous humps.
Too bad the Perl book has the camel.
...
--- 
--- !contact
name: Barack Obama
address:
  street: 1600 Pennsylvania Ave
  city: Washington, DC
...
----



=== Simple Collections 

.

==== Mappings

.

==== Sequences

.

=== Comments 

YAML allows you to make liberal use of comments within a YAML stream. It
uses the familiar `#` style of line commenting which is found in many
modern programming languages. Comments go from the `#` to the end of the
line. You can comment out whole lines, or put them at the end of lines
(as long as the comment isn't inside a scalar).

YAML has no "block" comment style, like you have in languages like Java
or JavaScript. These are somewhat dangerous, since a missing or
malformed comment marker can be hard to detect when the opening and
closing markers are far apart. As in other line oriented languages that
don't support block comments, you can simply comment out a region by
commenting out all its lines.

It is important to realize that comments are not part of the YAML
information model. In other words, when you load a YAML stream into
memory, any comments that are found are simply thrown away. This is
different than things like XML, where comments are actually a part of
the DOM. In YAML, the "DOM" is usually native language data structures
which also have no concept of annotative comments.

Here is an example detailing how you can use comments in YAML.

----
# This is a line comment before the first YAML document in the stream.
     #    Line comments don't need to start in the first column
---
- !soldier           # This is a 'soldier' object
  name: Gomer Pyle   
  rank: Private
  note: "A TV character      # Not a comment. It's inside a string.
    from the sixties"#This *is* a comment. It's after the string.
  # The '#Characters' in the following line is not a comment.
  url: http://en.wikipedia.org/wiki/Gomer_Pyle,_U.S.M.C.#Characters
# Commenting out a block of lines
# - !soldier
#   name: Vince Carter
#   rank: Sargeant
----

If the rules of what is and isn't a comment are confusing to you, just
remember if it looks like a comment, and it can't be part of a string,
it almost certainly is a comment. You don't need to think any harder
than that. (Unless, of course, you are writing a YAML parser. In that
case, go read the spec!)

=== Block vs Flow 

.

=== Scalars - TMTOWTDI 

Scalars are single, simple data values, like numbers and strings. One of
the most beautiful and differentiating features of YAML is that it gives
you several ways to express string data. This is important because
strings come in many different sizes and shapes.

YAML rarely requires you to quote strings. You only need to quote them if
their content conflicts with the YAML syntax, which is pretty rare. Quotation
marks visual clutter up complex data. Since YAML's primary design goal is
human friendly readability, the designers worked hard to minimize quotes.

Consider the following example:

----
old person: Rip van Winkle
age: 42
url: http://winkle.net
quote: Rip said, "I'm tired"
----

This document is a simple mapping of 3 key/value pairs. The first pair of
strings has space in both the key and value. YAML is not confused. It knows
that that the key stops at the colon+space and that the value stops at the end
of the line. The second value is a number. Quoting would have YAML read it as
a string value, which visually makes sense. The third value is a url which
contains a colon, but since the colon has no space right after it, YAML is not
confused. The final value contains quotes itself, but since the value does not
start with a quote, there's no ambiguity.

Here are some examples of when quoting is required:

----
leading or trailing spaces: '  stuff and such '
escaped characters: "like a tab\tand a newline\n"
number is a string: '90210'
contains colon/space: 'why: because we like you'
starts with a YAML char: '*neato*'
----

As you can see above, there are 3 ways to write scalars: Unquoted, Single
Quoted and Double Quoted. As it turns out, YAML offers two more scalar styles.
The following sections describe each quoting style in detail, describing when
they are used, what their special properties are and also when they are 

==== Unquoted

Unquoted scalars are the most common way to express string values in YAML, but
there's actually more to leaving the quotes off than you might think. 

Unquoted scalars are subject to a property called implicit typing, which I'll
describe in more detail later in this chapter. The gist of it is that things
that look like numbers become numbers, things that look boolean are indeed
boolean and most everything else is a string by default.

----
a number: 123
numeric string: '8675309'
boolean: true
just a word: 'true'
a string: is a string, of course, of course
complex, but just a string: /^(foo|ba[rz])? .*$/
multiline: one   two
  three
    four
----

In the last pair, the value spans 2 lines (due to indentation), and is
parsed as `"one two three four"`. This is due to YAML's whitespace
folding rules. Similar to HTML, newlines in the middle of a scalar (and
their adjacent space characters) are replaced by a single space. The 3
spaces between "one" and "two" are not collapsed, however.

NOTE: Unquoted strings that are used as mapping keys have a length limit
of 1024 Unicode characters. This limitation was put in place to ease
parser implementation. See the YAML spec (http://www.yaml.org/spec/1.2/)
for details.

==== Single Quoted

If you need to quote something, single quotes are usually the simplest
way to do it. Unlike double quotes, there are no special character
sequences or escaping, save one: "if you need a single quote character
inside a single quoted string, use 2 single quotes". Otherwise
everything you see is what you get.

----
numeric string: '2468'
significant space: '   Dear John,'
quote in quote: ' Sorry, we''re through.'
multiline: 'One, two
buckle my shoe'
----

Multiline single quoted scalars are also subject to whitespace folding,
but they do not require indentation to continue the line.

==== Double Quoted

Double quoted scalars are very important in YAML. They are the only form
of string that can contain every possible Unicode character. Things like
the null character, all the control characters and explicitly escaped
Unicode characters are no problem in double quotes.

The double quoted string makes liberal use of the backslash character to
perform its duties. You will, no doubt, recognize the escape sequences
from many places. They are a superset of the C language escapes.

Here is an example detailing the things that you can do inside
double quotes:

----
"\0": null
"\a": bell
"\b": backspace
"\t": horizontal tab
"\n": line feed
"\v": vertical tab
"\f": form feed
"\r": carriage return
"\e": escape
"\x20": space
"\"": double quote
"\/": slash
"\\": backslash
"\N": next line
"\_": non-breaking space
"\L": line separator
"\P": paragraph separator
"\x12": 8 bit           # \x + 2 hex characters
"\u1234": 16 bit        # \u + 4 hex characters
"\U12345678": 32 bit    # \U + 16 hex characters
----

As you can see, YAML provides handy C-compatible escape sequences for
common unprintable characters, and any possible Unicode character can be
written using the `\x`, `\u` or `\U` escapes. However, don't think that you
need to use escapes to serialize all the tea in China.

----
the tea escaped: "\u8336"
good Chinese tea: 茶
----

The values of these two pairs are the same string. The first can can be
written on any keyboard. The second can be read by any person from China.
(and without quotes!)

==== Literal Block Strings

.

==== Folded Block Strings

.

=== Data Types 

.

=== YAML Tags and Explicit Typing 

.

=== Implicit Typing 

.

=== Aliases and Anchors - (References and Recursion) 

.

=== Complex Keys 

.

=== Sets and Ordered Mappings 

.

=== YAML Specification Numbering 

.
