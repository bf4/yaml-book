Title: YAML Ain't Markup Language 
Author(s): Ingy döt Net 
Title and Affiliation: 
Preferred Mailing Address: 
 1711 14TH AVE 
 SEATTLE, WA 
 98122 
Email Address: ingy@ingy.net 

= Book Summary 

== In one sentence tell me why the audience will want to buy this book? 

An ever increasing number of technologies use YAML for purposes ranging
from software configuration to data interchange to object serialization
to analytical visualization and YAML Ain't Markup Language is the
concise yet definitive resource for enabling people to use YAML
effectively.

== Summarize what the book is about.

    Please imagine that this text will appear on the back cover of your
    book. Also, please indicate why your book would be unique in the
    market place.

YAML is wonderful format for storing the data objects/structures of
modern programming languages (like Perl, Python, PHP, Ruby and Java) in
a human friendly, readable/editable way. The markup is visually minimal,
allowing the data to shine. This makes your data not only easy to
understand, but easy to share between programs written in different
languages.

In YAML Ain't Markup Language, Ingy döt Net, one of the primary YAML
inventors, will teach you by example how to use YAML effectively in your
computer related projects. Whether you need a simple and intuitive
configuration format, are debugging recursive and complex data objects,
or you are defining a strongly typed data sharing protocol between
programming languages, this book will be invaluable.

Many programming frameworks including Ruby on Rails and CPAN use YAML
because it is simple and obvious to use. However YAML has robust
facilities for capturing all the details you need to serialize complex
data objects, that formats like XML and JSON were never intended to
handle. This book explains the details of why that is the case, and
shows how you can use all these formats in complimentary ways.

= Technology Summary 

== Briefly explain the technology and why it is important to computer
professionals. 

YAML is the only multi-programming-language data serialization standard
in existence today. Some may argue that XML and JSON fit this bill.
While you could conceivably find ways to serialize data objects in XML
and JSON, they are not technologies designed for that purpose. The first
sentence of their Wikipedia entries is as follows:

    * XML – is a general purpose ... markup language 
    * JSON - is a lightweight computer data interchange format 
    * YAML - is a human-readable data serialization format 

While YAML is designed to be a complete data serialization format, with
facilities for object types and recursive references, its primary
strength is its human readability (and writability). YAML brings data
structures alive, and this makes it quite desirable for many programming
and data manipulation tasks.

= Audience 

== Explain who the primary audience is. What professional positions
does this audience hold? What knowledge do you assume of this 
audience? What books can you assume they have read? What skills 
can you assume they have mastered?  

The typical reader of “YAML” is fairly technical. She uses YAML to
configure Open Source software, to visualize complex data objects and to
store/retrieve these objects, possibly between different programs. It is
likely that she is a Perl, Python, Ruby, PHP or Java programmer.

Although YAML is unrelated to XML, the primary audiences would likely be
overlapping.

== What conferences do they attend? What publications (magazine,
journals) do they read? Who are the leaders in this field that you feel 
might make great reviewers, or endorsers of your book? 

The reader of “YAML” would be likely to attend O'Reilly programming
conferences (including OSCON) because YAML is designed with (what I
term) “The O'Reilly Languages” in mind. Specifically Perl, Python,
Ruby, PHP, Java and JavaScript.

== Reviewers and Endorsers might include: 

    * Clark Evans – Creator of YAML 
    * Oren Ben-Kiki – Inventor of YAML 
    * Damian Conway – Author of Perl Best Practices 
    * Yukihiro Matsumoto – Creator of Ruby 
    * Ricardo Signes - Author of the Rx schema language 
    * Steve Howell – Friend and early Python YAML implementor 
    * Lyssa Kaehler – Personal friend with an interest in the book 

== Please provide some scenarios that indicate how the audience will use
the book. For example, will reader refer to it daily as a reference, read 
it cover to cover once and place it back on a bookshelf? 

I envision “YAML Ain't Markup Language” to be primarily a
reference. However YAML is a fairly deep subject, and the more advanced
topics are not intuitive. So some parts of the book should make for an
enlightening read.

= Key Topic Coverage 

== List five key terms that a possible consumer of your book would
search on to find your book: 

    1. YAML 
    2. Data Serialization 
    3. Configuration Format 
    4. Ruby on Rails 
    5. Computer Programming 

= What problem(s) does this book solve? 

== Please provide 4 benefits this book will provide to its audience: 

YAML (like Perl) makes the “simple things simple and the hard things
possible”. That is to say, even though basic YAML is simple and likely
obvious, there are concepts and features that are quite useful though
tricky to master.

This book will: 

    1. Explain the importance of data to every day programming. 
    2. Explain the entire YAML language, starting simple and then diving deep. 
    3. Explain the common use cases of of using YAML to simplify programming. 
    4. Cover the current programming tools used for YAML support today. 

= Other Book Features 

== Is there a companion web site? If so, what do you plan to include
on the site?

The primary YAML site is http://yaml.org. I am one of the maintainers of
that site. I will see to it that there is site called
http://book.yaml.org (or similar) that contains things like programming
code examples.

= Competition 

== What books compete with this book? Please list title and author. How
is your proposed book different (in content coverage, tone, approach) 
and/or better? 

== As far as I can tell, this book has no directly competing book. Also,
there is no book detailing the popular data format “JSON”, and this
book will cover that format in some detail.

= Author Biography 

== Why are you uniquely qualified to write this book? Why are you the 
best person to be writing this book? 

I am one of the three primary creators (along with Clark Evans and Oren
Ben- Kiki) of the YAML specification. I have been involved in every
step/decision of the creation of the YAML language since it began in
April 2001.

I am the author of the YAML.pm and YAML::XS Perl modules, which are the
primary modules used by the Perl community (available on CPAN).

I have written technical articles for various Perl related magazines
including Jon Orwant's “The Perl Journal”.

= Book Outline/Tentative Table of Contents 

== Please include detailed tentative table of contents (include at a 
minimum, 2 levels of headings)  Each chapter should include a 
statement of purpose in the form of 1 paragraph per chapter outlining 
the goals and topic coverage of the chapter. 

1) Modern Data and Computer Languages – This chapter talks about
   the common data structures that modern, object oriented
   programming languages like Perl all are centered around. Namely
   hashes, arrays and scalars. This is important groundwork, because
   YAML is also centered around these structures. The also covers
   types and references which are essential in explaining YAML. The
   chapter talks about YAML’s design goals, like Human Readability.
   Finally the chapter explains the complimentary relationship of
   YAML to XML and JSON.

  A) YAML – A Language for Data 
  B) Data, Data Structures and Databases 
  C) Hashes, Arrays and Scalars 
  D) Modern Programming Languages 
  E) Types and Objects 
  F) Data References 
  G) Human Readability 
  H) YAML, XML and JSON 

2) The YAML Data Format – Like the Camel book for Perl, this chapter
   has the “Gory Details” and is definitely the primary reference
   part of the book. The chapter starts with the basics, but then
   systematically covers all the YAML syntax and semantics in depth.

  A) Simple Collections 
  B) Comments 
  C) Block vs Flow 
  D) Streams and Documents 
  E) Scalars - TMTOWTDI 
  F) Data Types 
  G) YAML Tags and Explicit Typing 
  H) Implicit Typing 
  I) Aliases and Anchors - (References and Recursion) 
  J) Complex Keys 
  K) Sets and Ordered Mappings 
  L) YAML Specification Numbering 

3) Processing YAML - This chapter explains the common ways that computer
   programs consume and produce YAML. Copyright © 2004, O’Reilly
   Media. All rights reserved.

  A) Dump / Load API 
  B) Streaming API 
  C) Data Shadowing 

4) The Full YAML Stack - When transferring data between a YAML
   document and an internal data structure, there is a multilayered
   “stack” of steps that happened in each direction. This chapter
   goes into detail and examination of exactly what happens at each of
   these steps.

  A) Dump Stack 
    A) Dump 
    B) Represent 
    C) Serialize 
    D) Present 
  B) Load Stack 
    A) Parse 
    B) Compose 
    C) Construct 
    D) Load 
  C) Round Tripping 
  D) Type Resolution 

5) YAML Programming Reference - This chapter explains the common tools
   and APIs currently available in 6 different programming languages.

  A) Ruby 
  B) Python 
  C) Perl 
  D) PHP 
  E) Java 
  F) JavaScript 

6) Appendix I - YAML Projects Overview - This appendix discusses the
   major relevant projects driving YAML its community.

  A) Specification - The YAML 1.2 Specification 
  B) libyaml - The definitive C library for processing YAML 
  C) Syck - The original C library 
  D) Ypaste - The YAML Validator 
  E) Rx - Schema Language 

7) Appendix II - YAML in the Wild - This appendix shows the major uses
   of YAML in various high profile projects.

  A) Ruby on Rails - YAML is the configuration language of choice. 
  B) CPAN - Perl module metadata is stored in YAML. 
  C) Catalyst - Uses YAML for configuration. 

8) Index - Standard Index of Terms 

= Specs/Schedule: 

== How many pages do you expect the book to be? 

I imagine this book to be 100 – 150 pages long. 

== When do you anticipate delivering a complete draft of the manuscript 
for technical review? 

I imagine that the first draft of this book could be completed by January 31, 
2009. 

Please answer every question in these guidelines and provide a
writing sample, (samples can include a sample chapter, whitepaper, or
magazine article). I wrote this article for the Fall 2000 edition of
The Perl Journal. Fortunately someone put this online in its
entirety: http://www.foo.be/docs/tpj/issues/vol5_3/tpj0503-0005.html

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
Recommended Reading 
The Forest for the Trees : An Editor's Advice to Writers, Betsy Lerner 
