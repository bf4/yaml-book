<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
"http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">
<article>
  <title>Get Started Writing in DocBook</title>

  <articleinfo>
    <orgname>Digital Content and Publishing Services</orgname>

    <abstract>
      <para><ulink url="http://docbook.org">DocBook</ulink> is an OASIS
      standard for XML that is ideal for writing long, technical documents
      that have complex structure and cross-references. With its expressive
      tagging, DocBook provides the equivalent of a high-resolution image that
      is able to be converted into many alternate formats without losing its
      fidelity. DocBook can be rendered as PDF for printing, HTML,
      <literal>man</literal> pages, audio, or even Braille. This versatility
      and re-usability makes DocBook 4.4 XML the preferred format for O’Reilly
      books.</para>
    </abstract>

    <copyright>
      <year>2008</year>

      <holder>O’Reilly Media, Inc.</holder>
    </copyright>

    <pubdate>April 2008</pubdate>
  </articleinfo>

  <section>
    <title>Why DocBook?</title>

    <para>Why not troff? Why not LaTex?</para>

    <para>We’ve got nothing against LaTex, troff, or any other formatting
    markup system. But typesetting markup like LaTex is inherently focused on
    formatting—font size, margins, alignment, etc. We’d rather you spent your
    time focused on the semantic structure of your book (how sections are
    divided, which information goes in a sidebar versus a note, and so on),
    and that’s where DocBook shines. In the same way most well-designed web
    sites separate content from formatting using XHTML and CSS (XHTML for the
    content, and CSS for the formatting), DocBook lets us abstract formatting
    decisions away from content decisions.</para>

    <para>Particularly as O’Reilly expands its efforts to provide content in
    multiple formats and at multiple stages of the content’s life cycle,
    cost-effectively generating multiple, distinct output formats from the
    same source document becomes critical, even though it means losing some
    degree of granular control over the output. What does that mean for your
    book? It means that you’ll be able to view drafts of your book throughout
    the authoring process that are formatted much as they will be for print,
    and it means once your book is finished, it can go live on the Safari
    online library site almost immediately, rather than needing to first be
    converted into DocBook from another format, which can take several
    weeks.</para>
  </section>

  <section>
    <title>Using an O’Reilly Subversion Repository</title>

    <para>Once you have spoken with your editor and decided that you will
    write in DocBook, email the Publishing Services team at O’Reilly at
    <email>toolsreq@oreilly.com</email>; we can create a Subversion (SVN)
    repository for you on an O’Reilly server that contains
    <filename>book.xml</filename> and other files to use as a template for
    getting started. There are several benefits to using an O’Reilly SVN
    repository:<remark> </remark></para>

    <itemizedlist>
      <listitem>
        <para>It is easier to exchange files with your editor and coauthors
        for review.</para>
      </listitem>

      <listitem>
        <para>It is easier for the O’Reilly Digital Content team to help you
        with any DocBook questions you may have along the way.</para>
      </listitem>

      <listitem>
        <para>You can trigger PDF builds of your book every time you commit
        changes.</para>
      </listitem>

      <listitem>
        <para>The files are stored in a safe and secure location that is
        backed up regularly.</para>
      </listitem>
    </itemizedlist>

    <para>Once you check out the template files from your SVN repository, you
    can open the <filename>ch01.xml</filename> file and begin typing your
    first paragraph. The basic <literal><ulink
    url="http://www.docbook.org/tdg/en/html/ch02.html#d0e2566">DOCTYPE</ulink></literal>
    and other metadata will already be in the <filename>book.xml</filename>
    file for you, so you can concentrate more on writing your book and less on
    XML markup.</para>

    <para>After you complete your first chapter and save it, you can create a
    new, separate file for chapter 2, modeled on your chapter 1 file. Name
    your new chapter with O’Reilly’s standard naming
    convention—<filename>ch02.xml</filename>—and then add this chapter to the
    book file that is in your book directory, as described in the section
    below (<xref linkend="organizing_files" />). As you create new chapters
    and add them to the book file, you’ll build a complete book document that
    can be published in a variety of formats.</para>
  </section>

  <section id="organizing_files">
    <title>Organizing Your Files</title>

    <para>O’Reilly prefers that each chapter is its own separate file and you
    may find this system much easier to manage than a single, consolidated
    book file. As you will see in the <filename>book.xml</filename> file that
    O’Reilly provides for you, it’s best to have the book file just contain
    the book metadata and no actual content. The content is referenced and
    included by <ulink
    url="http://www.sagehill.net/docbookxsl/ModularDoc.html#UsingXinclude">using
    <literal>XInclude</literal>s</ulink>. Each chapter is its own full DocBook
    document with its own <literal>DOCTYPE</literal> declaration, which will
    make validation easier.</para>

    <note>
      <para>Whether you structure a document with <literal>XInclude</literal>s
      or not, note that the XML <literal>id</literal> attributes you assign to
      sections, figures, etc., all need to be unique across the entire book.
      This is important for cross-referencing and it affects the validity of
      your XML document.</para>
    </note>
  </section>

  <section>
    <title>Will What I See in the XML Editor Mirror the Final PDF?</title>

    <para>DocBook markup specifies the structure and semantics of your
    document, but not the appearance. DocBook isn't stored as WYSIWYG files,
    so it can display differently in a program like the XMLmind XML Editor
    (XXE) than it will after rendering to PDF. This not only means that fonts
    and formatting will display differently, but line breaks may differ as
    well.</para>

    <para>The XML tags that are applied to the elements of your text are used
    in combination with XSLT stylesheets to render the final appearance of
    your book files. The XSLT stylesheet is similar to a CSS stylesheet for
    HTML. It sets up how each element and attribute in your book will look
    when rendered as a PDF. If you are using XXE, you can apply customizations
    to to have the display more closely mirror how the final product will
    look. See the later section <xref linkend="customizing_xxe" /> for
    information on downloading and installing these customizations.</para>

    <para>The toolchain that transforms your DocBook into its final PDF form
    is complex, involving layers of XSL-FO stylesheets and an FO to PDF
    processor, so if there is something that you’d like to see included in our
    rendering that isn’t showing up as you’d expect in your PDF, please
    contact <email>toolsreq@oreilly.com</email> and we will work with you to
    tweak the stylesheets as needed.</para>
  </section>

  <section>
    <title>Expressing Code in DocBook</title>

    <para>One of the more challenging aspects novices face when working with
    DocBook is correctly expressing computer code. In general, code blocks
    should be enclosed inside <literal>programlisting</literal> elements,
    which may in turn be inside of <literal>example</literal> elements (use an
    example when you want the code to have a caption you can reference
    elsewhere in your text). Within a <literal>programlisting</literal>,
    whitespace will be preserved as-is. But you still need to escape any
    characters that have special meaning in XML, such as
    <literal>&lt;</literal> and <literal>&gt;</literal>. These obviously come
    up quite a bit in code, like <literal>x &lt;= 1</literal>.</para>

    <para>If you don’t want to bother remembering to escape these things, you
    can use an <literal>XInclude</literal> section (O’Reilly also uses
    <literal>XInclude</literal>s to organize the book.xml, as described
    earlier in <xref linkend="organizing_files" />). In an
    <literal>XInclude</literal> section, the code blocks are referenced in
    <literal>&lt;xi:include&gt;</literal>s and are ignored by the XML parser
    (they’re not dropped or anything, but the parser doesn’t try to interpret
    them as XML):<footnote>
        <para>Or you can use a <literal>CDATA</literal> section. In a
        <literal>CDATA</literal> section, any text between
        <literal>&lt;![CDATA[</literal> and <literal>]]&gt;</literal> is
        ignored by the XML parser. If you’re using XXE, you can’t use
        <literal>CDATA</literal> sections, but on the other hand, you don’t
        need to worry about escaping any special characters, which is probably
        the better end of the bargain.</para>
      </footnote></para>

    <programlisting>&lt;programlisting&gt;
&lt;xi:include 
  xmlns:xi="http://www.w3.org/2001/XInclude" 
  parse="text" href="hello.c" /&gt;
&lt;/programlisting&gt;</programlisting>
  </section>

  <section>
    <title>What Type of XML Editor Should I Use?</title>

    <para>You can use whatever tool you like to write in DocBook XML, but
    O’Reilly recommends and supports XXE; this document specifically
    references XXE, and much of our documentation is directed toward users of
    XXE. If you’d like an installer for that to use with our customizations,
    please let us know. We’ll need to know the platform you’re running. (More
    experienced users who write in DocBook extensively may want to consider
    purchasing the Professional Edition.)</para>

    <para>Some of the advantages of using XXE include:</para>

    <itemizedlist>
      <listitem>
        <para>Validation on the fly</para>
      </listitem>

      <listitem>
        <para>GUI interface is similar to other popular word-processing
        programs</para>
      </listitem>

      <listitem>
        <para>Support from the O’Reilly content team</para>
      </listitem>
    </itemizedlist>

    <para>More details on using XXE can be found in the last section of this
    document (<xref linkend="working_with_xxe" />).</para>

    <para><note>
        <para>There are, of course, a lot of other editors that are good at
        handling DocBook. Depending on your background, you may find Emacs’
        nXML mode useful or <ulink
        url="http://www.pinkjuice.com/howto/vimxml/">vim with
        keybindings</ulink>. Some authors have expressed a preference for
        oXygen (<ulink
        url="http://www.oxygenxml.com/">http://www.oxygenxml.com/</ulink>)
        over XXE, especially given oXygen’s built-in SVN support and recent
        improvements in it’s WYSIWYG-mode.</para>

        <para>A fairly complete list of authoring tools is available on the
        DocBook wiki: <ulink
        url="http://wiki.docbook.org/topic/DocBookAuthoringTools"></ulink>.
        Please note that non-validating editors will place all of the burden
        of validation on you, the author. <ulink
        url="http://www.sagehill.net/docbookxsl/ToolsSetup.html#Validation">Validation</ulink>
        is not difficult, but invalid documents will not be accepted.</para>
      </note></para>
  </section>

  <section>
    <title>Keep It Simple</title>

    <para>“Keep it Simple” sounds a bit silly when referring to something as
    complex as DocBook, but the point here is that even though DocBook offers
    over 400 elements, you’ll likely need only a fraction of them. For
    example, you can safely stay away from the <literal>confsponsor</literal>,
    <literal>inlinemediaobject</literal>, and <literal>seriesvolnums</literal>
    elements. DocBook is meant to be comprehensive across a universe of
    technical documentation. We’re only dealing with a subset: content meant
    for expression in an O’Reilly title. Practically speaking, you’ll mostly
    use elements very similar to the standard HTML elements, like
    <literal>itemizedlist</literal> and <literal>table</literal>.</para>

    <para>An article by Keith Fahlgren on XML.com examines the most commonly
    used DocBook elements in O’Reilly books and may be useful to you: <ulink
    url="http://www.oreillynet.com/xml/blog/2007/05/docbook_elements_in_the_wild_a.html">DocBook
    in the Wild: A Look at Newer Content</ulink>.</para>
  </section>

  <section>
    <title>Sample Markup and PDFs</title>

    <para>This document is formatted as an article, so it contains some markup
    not found in a book. While it contains many of the tags that you will use
    within a book, it might be useful to check out some of the examples of
    books we have posted.</para>

    <para>You can find sample markup to use as a model in your own markup
    here: <ulink
    url="https://prod.oreilly.com/external/tools/docbook/prod/trunk/samples/"></ulink>
    (username: <literal>guest</literal>; empty password)</para>

    <para>The samples include a standard chapter as well as more complex
    markup, such as reference markup (found in the nutshell directory). There
    is also an directory for ongoing research and development of new features
    that authors have requested.</para>
  </section>

  <section>
    <title>See Also</title>

    <para>See the following for more information:</para>

    <variablelist>
      <varlistentry>
        <term>DocBook: The Definitive Guide</term>

        <listitem>
          <para><ulink
          url="http://www.docbook.org/tdg/en/html/docbook.html"></ulink></para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>DocBook Basics and References</term>

        <listitem>
          <para><ulink
          url="http://www.dpawson.co.uk/docbook/reference.html"></ulink></para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>DocBook.org</term>

        <listitem>
          <para><ulink url="http://www.docbook.org/"></ulink></para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>XXE Documentation</term>

        <listitem>
          <para><ulink
          url="http://www.xmlmind.com/xmleditor/documentation.shtml"></ulink></para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>The DocBook DTD</term>

        <listitem>
          <para><ulink
          url="http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd"></ulink></para>
        </listitem>
      </varlistentry>
    </variablelist>
  </section>

  <section id="working_with_xxe">
    <title>Working with XMLmind XML Editor</title>

    <para>The information in this document is geared toward using XXE as part
    of O’Reilly’s workflow. For more general information about getting started
    with XXE, a nice starting point is the official XXE documentation found at
    <ulink
    url="http://www.xmlmind.com/xmleditor/documentation.shtml"></ulink>. There
    is also a <ulink
    url="http://www.xmlmind.com/xmleditor/_distrib/doc/quickrefcard/quickrefcard-Letter.pdf">useful
    PDF</ulink> on the XXE site. Additionally, you may want to take a look at
    the XML.com article <ulink
    url="http://www.xml.com/pub/a/2007/06/20/getting-productive-with-xmlmind.html">Getting
    Productive with XMLMind</ulink> by O’Reilly authors James Elliot and Marc
    Loy. Their article was referenced during the creation of this document and
    is a good resource for beginners.</para>

    <section id="customizing_xxe">
      <title>Customizing XXE</title>

      <para>To run customizations that tweak XXE to display your DocBook
      documents more closely to their PDF (and eventually printed) form, you
      can find a CSS file customized to O’Reilly fonts, headings, and item
      numbering at <ulink
      url="https://prod.oreilly.com/external/tools/xxe/customizations/xmlmind_custom.zip"></ulink>
      (username: <literal>guest</literal>; empty password).</para>

      <para>Unzip the <filename>xmlmind_custom.zip</filename> file to
      <filename>~/.xxe/addon/</filename> if on Linux or Mac (and Unix, more
      generally). If on Windows XP, unzip to <filename>C:\Documents and
      Settings\&lt;username&gt;\Application
      Data\XMLmind\XMLEditor\addon\</filename>. More detailed instructions for
      installing customizations are found on the XXE web site: <ulink
      url="http://www.xmlmind.com/xmleditor/addons.shtml#manual_install"></ulink>.</para>
    </section>

    <section>
      <title>Using XXE</title>

      <para>A program like XXE puts a word-processing face on XML, making it
      more user-friendly while keeping the markup valid. The Element Bar (see
      <xref linkend="elementbar" />), or Node Path, at the top of your screen
      lets you know where you are in the XML structure at any given point
      (whether you are in a section title, paragraph, list, etc.). Clicking on
      the element will display a box around that entire element in your
      document. Conversely, wherever you click in your document, the Element
      Bar will show you where you are in the hierarchy of your
      document.</para>

      <figure float="none" id="elementbar">
        <title>The Element Bar shows the XML hierarchy</title>

        <mediaobject>
          <imageobject role="web">
            <imagedata fileref="figs/elementbar.png" format="PNG"
                       width="6.2in" />
          </imageobject>
        </mediaobject>
      </figure>

      <para>You can also move up and down your hierarchy by using the movement
      buttons in the upper right-hand corner of the screen.</para>

      <para>To see a view of the document structure in tree form, go to View→0
      (no style sheet). This is shown in <xref linkend="viewMenu" />. If you’d
      like to see both the DocBook and the tree view, go to
      Options→Preferences→Window→Show both tree and styled views, as shown in
      <xref linkend="treeView" />.</para>

      <figure float="none" id="viewMenu">
        <title>View menu</title>

        <mediaobject>
          <imageobject>
            <imagedata fileref="figs/viewMenu.png" format="PNG" width="4in" />
          </imageobject>
        </mediaobject>
      </figure>

      <figure float="none" id="treeView">
        <title>Tree view</title>

        <mediaobject>
          <imageobject>
            <imagedata fileref="figs/treeView.png" format="PNG" width="6.2in" />
          </imageobject>
        </mediaobject>
      </figure>

      <note>
        <para>When editing the book file itself, note that edits cannot be
        made to individual chapters there, but must be entered in the
        individual chapter file. You can open the referenced file by placing
        your cursor in it and hitting <keycap>Ctrl-Shift-E</keycap>. You can
        also edit the chapter file by placing your cursor in the specific
        chapter and choosing Edit→Reference→Edit Referencing Document.</para>
      </note>

      <section>
        <title>Handy Tools</title>

        <para>When creating your DocBook manuscript, there are a number of
        tools you may want to use from within XXE. Here’s a list of a few of
        our favorites:</para>

        <variablelist>
          <varlistentry>
            <term>Search &amp; Replace</term>

            <listitem>
              <para>When writing, you may want to search or search and replace
              certain words or phrases. This can be done by clicking the
              Search tab in the attribute menu (shown in <xref lang=""
              linkend="search" />. You can chose to ignore case or search by
              part of a word, and you can also choose to skip over an instance
              or every instance of the word within a certain element.</para>

              <figure float="none" id="search">
                <title>Searching a document</title>

                <mediaobject>
                  <imageobject>
                    <imagedata fileref="figs/search.png" format="PNG"
                               width="3in" />
                  </imageobject>
                </mediaobject>
              </figure>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>Spelling</term>

            <listitem>
              <para>Another tool that comes in handy is the Spell check
              (illustrated in <xref linkend="spell" />, also found in the
              attribute menu. You can also skip elements here, so if you want
              a word to be capitalized in section headers, but not within
              text, you can skip the instances in section headers.</para>

              <figure float="none" id="spell">
                <title>Spell check</title>

                <mediaobject>
                  <imageobject>
                    <imagedata fileref="figs/spell.png" format="PNG"
                               width="3in" />
                  </imageobject>
                </mediaobject>
              </figure>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>Special Characters</term>

            <listitem>
              <para>If you find that you need to insert a character that isn’t
              a standard keyboard character, you can choose it from the
              Characters tab, displayed in <xref linkend="characterTool" />.
              This character palette will also display the Unicode number for
              a character if you hover over the symbol. If you can’t find a
              symbol, but know the Unicode number, you can type in the Unicode
              number to bring up the appropriate symbol.</para>

              <figure float="none" id="characterTool">
                <title>Character palette</title>

                <mediaobject>
                  <imageobject>
                    <imagedata fileref="figs/characterTool.png" width="3in" />
                  </imageobject>
                </mediaobject>
              </figure>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>Validation</term>

            <listitem>
              <para>Though tools like XXE are checking the validity of your
              document as you go, you can also chose the Validity tab to
              display any errors that might have cropped up in the
              document.</para>

              <note>
                <para>You can ignore errors about broken cross-references if
                the reference is to something in a different chapter file.
                These types of errors will disappear once you look at the book
                file with all chapters included.</para>
              </note>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>Note to self…</term>

            <listitem>
              <para>If you would like to put in a comment as a reminder to
              yourself or someone else who will be working with your files,
              you can choose Edit→Comment→Insert Comment (as shown in <xref
              linkend="insertcomment" />. A comment will be inserted with a
              yellow background to help it stand out. See <xref
              linkend="commentview" /> for an example. You don’t need to worry
              about removing comments, since the stylesheets know not to
              display them in final copy.</para>

              <para>Another option is entering
              <literal>&lt;remark&gt;</literal>s in the text. These are
              displayed in a different font and color so as to stand
              out.</para>

              <figure float="none" id="insertcomment">
                <title>Inserting a comment</title>

                <mediaobject>
                  <imageobject>
                    <imagedata fileref="figs/insertcomment.png" format="PNG"
                               width="4in" />
                  </imageobject>
                </mediaobject>
              </figure>
            </listitem>
          </varlistentry>
        </variablelist>

        <figure float="none" id="commentview">
          <title>Comment within a document</title>

          <mediaobject>
            <imageobject>
              <imagedata fileref="figs/commentview.png" format="PNG"
                         width="6.2in" />
            </imageobject>
          </mediaobject>
        </figure>
      </section>

      <section>
        <title>New sections</title>

        <para>When adding sections to your document, choose the
        <literal>section</literal> tag as shown in <xref linkend="secMen" />.
        If the new section comes above or below where you want it to in the
        hierarchy, you can simply use DocBook→Promote and DocBook→Demote to
        move it to the appropriate level. The buttons used are shown in <xref
        linkend="promotedemote" />. By promoting sections, you can move a
        section that is currently a second-level, or B-head to be a
        first-level, or A-Head. Demoting will move an A-head down to a
        B-head.</para>

        <para>The Move Up and Move Down functions can be used to move elements
        past each other as well, though they’re mostly used to move sections
        around.</para>

        <figure float="none" id="secMen">
          <title>Adding a new section</title>

          <mediaobject>
            <imageobject>
              <imagedata fileref="figs/secMenu.png" format="PNG" width="4in" />
            </imageobject>
          </mediaobject>
        </figure>

        <figure float="none" id="promotedemote">
          <title>Promoting and demoting sections</title>

          <mediaobject>
            <imageobject>
              <imagedata fileref="figs/promotedemote.png" format="PNG"
                         width="6.2in" />
            </imageobject>
          </mediaobject>
        </figure>

        <para>When you create new sections, your sections will automatically
        renumber in XXE according to where the new section has been entered.
        The same applies to figure and table numbering.</para>
      </section>

      <section>
        <title>Splitting and merging sections</title>

        <para>If you need to split a section in two, select the paragraph that
        you want to start the new section by choosing the
        <literal>para</literal> element and then choose DocBook→Promote to
        create a new section with that paragraph.</para>

        <para>Merging two sections can be a bit more difficult. If you are
        just moving a few paragraphs into another section, you can cut and
        paste the text from one section to the other and delete the second
        section title. If you have a more complex section to move, use the
        steps below:</para>

        <orderedlist>
          <listitem>
            <para>Make sure the two sections you want to join are adjacent to
            each other, with the section heading that you want to keep
            positioned first.</para>
          </listitem>

          <listitem>
            <para>Select the first <literal>section</literal> from the element
            bar.</para>
          </listitem>

          <listitem>
            <para>Now Select→Select All Children (boxes will surround all the
            individual elements that make up that section).</para>
          </listitem>

          <listitem>
            <para>Choose Edit→Copy (Cut isn’t an option for a complex
            section).</para>
          </listitem>

          <listitem>
            <para>Select the <literal>title</literal> element of the second
            section you want to join.</para>
          </listitem>

          <listitem>
            <para>Choose Edit→Paste and paste section one into the
            <literal>title</literal> element of the first
            <literal>section</literal>. This will replace the second section’s
            title with the first section’s title, and insert all the other
            elements of the first section at the beginning of the second
            section.</para>
          </listitem>

          <listitem>
            <para>Now go back and delete the first section.</para>
          </listitem>
        </orderedlist>
      </section>

      <section>
        <title>Using elements correctly</title>

        <para>For XML to be valid it must not only be well-formed (which means
        that all the tags match), but also must have all the tags in the
        proper hierarchy according to the associated DTD (in our case, the
        DocBook 4.4 DTD). The tag at the top of the hierarchy is called the
        root element. For a book, <literal>&lt;book&gt;</literal> would be
        your root element, which would contain <literal>&lt;part&gt;</literal>
        or <literal>&lt;chapter&gt;</literal> children, for example. Tags like
        <literal>&lt;chapter&gt;</literal> must be nested within
        <literal>&lt;book&gt;</literal>, and a
        <literal>&lt;sect3&gt;</literal> cannot be directly nested within a
        <literal>&lt;sect1&gt;</literal>—it would have to be within a
        <literal>&lt;sect2&gt;</literal>. Reversed tags or improper nesting
        will return invalid DocBook files.</para>

        <para>We’d also prefer that you don’t put any block elements within
        <literal>&lt;para&gt;</literal>s. Some of the block elements that we’d
        like to avoid in <literal>&lt;para&gt;</literal>s are the
        following:</para>

        <simplelist type="vert">
          <member><literal>&lt;blockquote&gt;</literal></member>

          <member><literal>&lt;calloutlist&gt;</literal></member>

          <member><literal>&lt;caution&gt;</literal></member>

          <member><literal>&lt;computeroutput&gt;</literal></member>

          <member><literal>&lt;example&gt;</literal></member>

          <member><literal>&lt;figure&gt;</literal></member>

          <member><literal>&lt;glosslist&gt;</literal></member>

          <member><literal>&lt;important&gt;</literal></member>

          <member><literal>&lt;informalequation&gt;</literal></member>

          <member><literal>&lt;informalexample&gt;</literal></member>

          <member><literal>&lt;informalfigure&gt;</literal></member>

          <member><literal>&lt;informaltable&gt;</literal></member>

          <member><literal>&lt;itemizedlist&gt;</literal></member>

          <member><literal>&lt;literallayout&gt;</literal></member>

          <member><literal>&lt;mediaobject&gt;</literal></member>

          <member><literal>&lt;note&gt;</literal></member>

          <member><literal>&lt;orderedlist&gt;</literal></member>

          <member><literal>&lt;programlisting&gt;</literal></member>

          <member><literal>&lt;screen&gt;</literal></member>

          <member><literal>&lt;screenshot&gt;</literal></member>

          <member><literal>&lt;segmentedlist&gt;</literal></member>

          <member><literal>&lt;simplelist&gt;</literal></member>

          <member><literal>&lt;table&gt;</literal></member>

          <member><literal>&lt;tip&gt;</literal></member>

          <member><literal>&lt;variablelist&gt;</literal></member>

          <member><literal>&lt;warning&gt;</literal></member>
        </simplelist>

        <para>XXE will show you what element you are using in the element bar
        at the top of your screen. You can apply block elements to a large
        chunk of text (<literal>&lt;programlisting&gt;</literal>). You can
        also apply inline elements that apply to just a word or phrase within
        a block element (<literal>&lt;emphasis&gt;</literal>). To make a word
        or phrase emphasized (typically <emphasis>italic</emphasis>),
        highlight the text and click the Convert button. In the box below the
        Convert button, start typing the inline element you wish to apply, in
        this case <literal>&lt;emphasis&gt;</literal>. The most common
        elements that you will need are included in an XXE toolbar, so you
        won’t need to go searching for them.</para>

        <para>The Element Bar’s default description of the text in paragraph
        is <literal>#text</literal>. However, you can select the
        <literal>#text</literal> element and Convert to something that better
        suits your needs, like <literal>literal</literal>.</para>

        <para>If you tag something and realize that you need to retag it as
        something else, click on the element in your Element Bar to box the
        word or phrase. Then click the Convert button and choose the correct
        tag from below. The convert button is shown in <xref
        linkend="keyCapWrap" />. You can also use the formatting buttons in
        the toolbar to convert text to <emphasis>emphasis</emphasis>, links,
        or plain text. This is often faster that using the Convert
        button.</para>

        <figure float="none" id="keyCapWrap">
          <title>Using the Convert button</title>

          <mediaobject>
            <imageobject>
              <imagedata fileref="figs/keyCapWrap.png" format="PNG"
                         width="3in" />
            </imageobject>
          </mediaobject>
        </figure>

        <para>If you don’t see the element you want as an option for your
        highlighted text, it probably means it isn’t a valid option. Try
        placing your cursor at a different level in the hierarchy, or moving
        the element you want to change up or down. Only the elements that are
        valid for your location in the hierarchy are displayed as
        options.</para>

        <para>Similarly, if you’ve cut text from one spot and are having
        trouble pasting it, make sure that you are pasting into the same
        element. Try moving up or down the hierarchy. You can also select the
        Paste, Paste Before..., and Paste After...buttons from the tool
        bar.</para>

        <note>
          <para>Some markup isn’t automatically available as an inline
          element. There is no default tag for making text bold in DocBook. To
          work around this, you would tag the word as
          <literal>&lt;emphasis&gt;</literal> and then give it an attribute—in
          this case, you would assign an attribute
          <literal>role="bold"</literal>.</para>
        </note>

        <para>To move a piece of text up or down, chose the element from the
        Element Bar and then go to DocBook→Move Up or Docbook→Move Down. To
        move an element up or down in the hierarchy, chose the element in the
        Element Bar and select DocBook→Promote or DocBook→Demote.</para>

        <para>If you are including URLs in your document, it’s best to
        designate it as a <literal>ulink</literal>. This will allow a PDF or
        online version of your document to have active links to the URL and it
        will provide more consistent display of URLs in the printed
        text.</para>

        <para>Make sure if you tag something as a <literal>ulink</literal>
        that you enter the <literal>url</literal> in the attribute menu.
        Select the ??? and enter the URL where you want the link to direct
        readers. If you don’t enter the address as an URL attribute, you will
        get a red message that says <errortext>“Empty &lt;ulink&gt;! Needs
        url&gt;&gt;”</errortext>.<footnote>
            <para>...assuming you have the ORM customizations installed (see
            <xref linkend="customizing_xxe" />).</para>
          </footnote></para>

        <para>For a bulleted list, you can choose Add itemizedlist from the
        toolbar to insert the first bullet point. You can also add numbered
        lists (Add orderedlist) and variable, or term-definition, lists (Add
        variablelist).</para>
      </section>

      <section>
        <title>Tables</title>

        <para>There are two options for tables: formal and informal. A formal
        table will have a table number and caption, making it better suited
        for cross-referencing. An informal table lacks the table number and
        caption and is more suited for a little table interspersed with normal
        text that won’t need to be referenced later. The easiest way to add a
        table to a DocBook document is by choosing the Add Table button in the
        toolbar (shown in <xref linkend="tableInsert" />). The most common
        type of table you will probably use is
        <literal>table(head_row)</literal>—that is, a table with the row at
        the top serving as the header.</para>

        <figure float="none" id="tableInsert">
          <title>Inserting a table</title>

          <mediaobject>
            <imageobject>
              <imagedata fileref="figs/tableInsert.png" format="PNG"
                         width="4in" />
            </imageobject>
          </mediaobject>
        </figure>

        <para>If you need to add rows or columns to your table (the default is
        three rows by two columns), go to DocBook→Column→Insert Before or
        After or DocBook→Row→Insert Before or After.</para>

        <para>For a formal table, make sure you select the
        <literal>table</literal> element and apply an <literal>id</literal>
        attribute, as illustrated in <xref linkend="tableID" />. This is a
        unique identifier that will be used later when you add
        cross-references to it.</para>

        <figure float="none" id="tableID">
          <title>Applying an id attribute to a table</title>

          <mediaobject>
            <imageobject>
              <imagedata fileref="figs/tableID.png" format="PNG" width="3in" />
            </imageobject>
          </mediaobject>
        </figure>

        <warning>
          <para>Make sure that you press <keycap>Enter/Return</keycap> or the
          green check mark after putting in an attribute or else it will
          disappear when you move on.</para>
        </warning>
      </section>

      <section>
        <title>Figures</title>

        <para>Figures are similar to tables in that you can have formal or
        informal figures. For formal figures, make sure to include a caption.
        There is no need to number the figure since the O’Reilly stylesheet
        will take care of that later. O’Reilly books rarely have informal
        figures.</para>

        <para>O’Reilly authors should use PNG images for all figures since
        this format has been found to be easiest to create and publish. XXE is
        able to render PNGs but not PDFs—just like web pages. Image files
        themselves should be in the <emphasis>figs</emphasis> directory which
        is kept in the same directory as your <filename>book.xml</filename>
        file. This will be required down the road by the PDF processing
        software.</para>

        <para>To add an image, you can simply click the Add Image button in
        the toolbar and choose which type of image you are inserting. This is
        illustrated in <xref linkend="tableInsert" />. Screenshots insert a
        spot for the image plus a blue line called
        <literal>screeninfo</literal>. This <literal>screeninfo</literal> bar
        can be used to write up a summary of the screenshot, or
        deleted.</para>

        <figure float="none" id="figureInsert">
          <title>Inserting a figure</title>

          <mediaobject>
            <imageobject>
              <imagedata fileref="figs/figureInsert.png" format="PNG"
                         width="4in" />
            </imageobject>
          </mediaobject>
        </figure>

        <para>When the space for the image is selected, you will notice that
        in the attribute menu, <literal>fileref</literal> has ??? entered. By
        clicking the folder at the top of the attribute menu, you can browse
        for the file location of your image (see <xref
        linkend="figurePickFile2" />). You can also manually enter this file
        path next to <literal>fileref</literal> in the menu below or
        double-click on the image placeholder to bring up a
        <literal>fileref</literal> window, as shown in <xref
        linkend="fileref" />.</para>

        <figure float="none" id="figurePickFile2">
          <title>Sourcing the figure file</title>

          <mediaobject>
            <imageobject>
              <imagedata fileref="figs/figurePickFile2.png" format="PNG"
                         width="3in" />
            </imageobject>
          </mediaobject>
        </figure>

        <figure float="none" id="fileref">
          <title>Picking a file source location</title>

          <mediaobject>
            <imageobject>
              <imagedata fileref="figs/fileref.png" format="PNG" width="6.2in" />
            </imageobject>
          </mediaobject>
        </figure>

        <para>You’ll also want to make sure you enter an <literal>id</literal>
        so that the figure can be cross-referenced later.</para>

        <note>
          <para>Another thing you may specify while you have
          <literal>imagedata</literal> selected as your element is
          <literal>scalefit</literal> and <literal>width</literal>. This
          determines the size of your image.</para>
        </note>
      </section>

      <section>
        <title>Establishing cross-references</title>

        <para>While writing your document, you might want to put placeholder
        text (like <literal>()</literal> for example) where the
        cross-reference will later be inserted. When you are ready to insert
        the actual cross-reference, place your cursor inside the parens, where
        you want the <literal>xref</literal> to go.</para>

        <para>Click the Insert button and pick the <literal>xref</literal>
        element from the list of available elements in the Edit tool. Then in
        the attributes menu, next to <literal>linkend</literal> you will see
        ???. Click on the question marks and then click on the attribute list
        at the top of the attribute menu. This will give you a list of
        <literal>id</literal>s you can cross-reference. <xref
        linkend="linkend" /> and <xref linkend="linkFlow" /> illustrate
        this.</para>

        <figure float="none" id="linkend">
          <title>linkend</title>

          <mediaobject>
            <imageobject>
              <imagedata fileref="figs/linkend.png" format="PNG" width="6.2in" />
            </imageobject>
          </mediaobject>
        </figure>

        <figure float="none" id="linkFlow">
          <title>Select an xrefstyle</title>

          <mediaobject>
            <imageobject>
              <imagedata fileref="figs/linkFlow.png" format="PNG"
                         width="6.2in" />
            </imageobject>
          </mediaobject>
        </figure>

        <note>
          <para>If you need to reference a web page, select the text that you
          want to make a hyperlink and then convert it by using the Convert to
          link button in the toolbar. The location of this button is shown in
          <xref linkend="ulink" />. Then in the attribute menu, enter the
          <literal>url</literal> where the <literal>ulink</literal> should
          take readers (see <xref linkend="urlAttribute" />). This will
          produce a live link in the PDF or HTML versions of the
          document.</para>

          <figure float="none" id="ulink">
            <title>Convert to ulink</title>

            <mediaobject>
              <imageobject>
                <imagedata fileref="figs/ulink.png" format="PNG" width="4in" />
              </imageobject>
            </mediaobject>
          </figure>

          <figure float="none" id="urlAttribute">
            <title>Entering the <literal>URL</literal></title>

            <mediaobject>
              <imageobject>
                <imagedata fileref="figs/urlAttribute.png" format="PNG"
                           width="3in" />
              </imageobject>
            </mediaobject>
          </figure>
        </note>

        <para>For O’Reilly books, make sure that all figures, tables, and
        examples are explicitly cross-referenced in the text.</para>
      </section>
    </section>
  </section>
</article>