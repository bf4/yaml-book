<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN" "http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">

<book lang="en">
<title>YAML</title>
<bookinfo>
      <title>YAML Ain't Markup Language</title>
      <author>
        <firstname>Ingy</firstname>
        <surname>dot Net</surname>
        <affiliation><orgname>Oui Code Software</orgname></affiliation>
        <email>ingy@ingy.net</email>
      </author>
      <copyright>
        <year>2010</year>
        <holder>O&#x2019;Reilly Media    </holder> </copyright>
      <abstract>
        <para><citetitle>Programming Scala</citetitle> introduces an exciting new language that offers all the benefits of a modern object model, functional programming, and an advanced type system. Packed with code examples, this comprehensive book teaches you how to be productive with Scala quickly, and explains what makes this language ideal for today's highly scalable, component-based applications that support concurrency and distribution. You'll also learn the advantages that Scala offers as a language for the Java Virtual Machine. </para>
        <para>Learn more at <ulink url="http://programmingscala.com/">programmingscala.com</ulink> or <ulink url="http://oreilly.com/catalog/9780596157746/">at the book's catalog page</ulink>.</para>
      </abstract>
      <legalnotice>
        <para>This work has been released under the <ulink url="http://creativecommons.org/licenses/by-nc/3.0/">Creative Commons Attribution-Noncommercial</ulink>.</para>
      </legalnotice>
</bookinfo>
<preface id="_preface">
<title>Preface</title>
<sect1 id="_conventions_used_in_this_book">
<title>Conventions Used in This Book</title>
<simpara id="para_the_following_typographic">The following typographical conventions are used in this book:</simpara>
<variablelist>
<varlistentry id="varlistentry-italic">
<term>
<emphasis>Italic</emphasis>
</term>
<listitem>
<simpara>
  Indicates new terms, URLs, email addresses, filenames, and file
  extensions.
</simpara>
</listitem>
</varlistentry>
<varlistentry id="varlistentry-constant-width">
<term>
<literal>Constant width</literal>
</term>
<listitem>
<simpara>
  Used for program listings, as well as within paragraphs to refer to
  program elements such as variable or function names, databases, data
  types, environment variables, statements, and keywords.
</simpara>
</listitem>
</varlistentry>
<varlistentry id="varlistentry-constant-width-bold">
<term>
<userinput>Constant width bold</userinput>
</term>
<listitem>
<simpara>
  Shows commands or other text that should be typed literally by the
  user.
</simpara>
</listitem>
</varlistentry>
<varlistentry id="varlistentry-constant-width-italic">
<term>
<replaceable>Constant width italic</replaceable>
</term>
<listitem>
<simpara>
  Shows text that should be replaced with user-supplied values or by
  values determined by context.
</simpara>
</listitem>
</varlistentry>
</variablelist>
<tip><simpara>This icon signifies a tip, suggestion, or general note.</simpara></tip>
<caution><simpara>This icon indicates a warning or caution.</simpara></caution>
</sect1>
<sect1 id="_using_code_examples">
<title>Using Code Examples</title>
<simpara id="para_this_book_is_here_to_help">This book is here to help you get your job done. In general, you may use
the code in this book in your programs and documentation. You do not
need to contact us for permission unless you’re reproducing a
significant portion of the code. For example, writing a program that
uses several chunks of code from this book does not require permission.
Selling or distributing a CD-ROM of examples from O’Reilly books does
require permission. Answering a question by citing this book and quoting
example code does not require permission. Incorporating a significant
amount of example code from this book into your product’s
documentation does require permission.</simpara>
<simpara id="para_we_appreciate_but_do_not">We appreciate, but do not require, attribution. An attribution
usually includes the title, author, publisher, and ISBN. For example:
&#8220;<emphasis>YAML</emphasis> by Ingy döt Net. Copyright 2009 O’Reilly Media, Inc.,
978-0-596-xxxx-x.&#8221;</simpara>
<simpara id="para_if_you_feel_your_use_of_c">If you feel your use of code examples falls outside fair use or the
permission given above, feel free to contact us at
<ulink url="mailto:permissions@oreilly.com">permissions@oreilly.com</ulink>.</simpara>
</sect1>
<sect1 id="_safari_books_online">
<title>Safari® Books Online</title>
<note><simpara>When you see a Safari® Books Online icon on the cover of your
      favorite technology book, that means the book is available online
      through the O’Reilly Network Safari Bookshelf.</simpara></note>
<simpara id="para_safari_offers_a_solution">Safari offers a solution that’s better than e-books. It’s a virtual
library that lets you easily search thousands of top tech books, cut and
paste code samples, download chapters, and find quick answers when you
need the most accurate, current information. Try it for free at
<ulink url="http://my.safaribooksonline.com">http://my.safaribooksonline.com</ulink>.</simpara>
</sect1>
<sect1 id="_how_to_contact_us">
<title>How to Contact Us</title>
<simpara id="para_please_address_comments_a">Please address comments and questions concerning this book to the
publisher:</simpara>
<screen>O’Reilly Media, Inc.
1005 Gravenstein Highway North
Sebastopol, CA 95472
800-998-9938 (in the United States or Canada)
707-829-0515 (international or local)
707 829-0104 (fax)</screen>
<simpara id="para_we_have_a_web_page_for_th">We have a web page for this book, where we list errata, examples, and
any additional information. You can access this page at:</simpara>
<screen>http://www.oreilly.com/catalog/CATALOGPAGE</screen>
<simpara id="para_to_comment_or_ask_technic">To comment or ask technical questions about this book, send email to:</simpara>
<screen>mailto:bookquestions@oreilly.com[bookquestions@oreilly.com]</screen>
<simpara id="para_for_more_information_abou">For more information about our books, conferences, Resource Centers, and
the O’Reilly Network, see our web site at:</simpara>
<screen>http://www.oreilly.com</screen>
</sect1>
<sect1 id="_acknowledgements">
<title>Acknowledgements</title>
<simpara id="para_as_we_developed_the_book">As we developed the book, many people&#8230;</simpara>
</sect1>
</preface>
<chapter id="_yaml_a_language_for_data">
<title>YAML - A Language for Data</title>
<simpara id="para_my_friend_and_colleague_s">My friend and colleague Steve Howell used to always say, "Programming is
just about moving data from here (he holds his hands out to his left
side and moves them over to his right with a dry, sardonic chuckle) to
there". I&#8217;ve always been of the notion that the better organized your
data becomes, the more minimal and beautiful the programs you write, to
move it from one place to the other, can be.</simpara>
<simpara id="para_yaml_is_a_language_for_da">YAML is a <emphasis>Language</emphasis> for <emphasis>Data</emphasis>. There are, of course, many ways to
encode data into a serialized (and even human readable) form. That&#8217;s
not what I&#8217;m talking about. Just as natural languages are about
communicating ideas from person to person, and computer languages
are about communicating instructions from people to computers, YAML
is a <emphasis>language</emphasis> for communicating the meaning of data. This
communication can be:</simpara>
<screen>- Human to Computer
- Computer to Human
- Computer to Computer
- Human to Human</screen>
<simpara id="para_if_you_ve_never_seen_yaml">If you&#8217;ve never seen YAML before, well&#8230; trust me&#8230; you actually
<emphasis>have</emphasis> seen YAML before. The list just above this paragraph is a
complete and well formed YAML document. To a computer, it represents an
array of unicode character strings. To an everyday reader like yourself,
it&#8217;s a list of bullet points.</simpara>
<simpara id="para_this_is_the_inherent_beau">This is the inherent beauty of YAML. Data can be communicated simply,
concisely and accurately to both the computers and people.</simpara>
<sect1 id="_modern_data_and_programming_languages">
<title>Modern Data and Programming Languages</title>
<simpara id="para_when_i_studied_computer_s">When I studied Computer Science back in the prehistoric days (I was
actually a COBOL teaching assistant and wrote my first Fortran programs
on punch cards), we learned about many different data structures. Things
like binary trees, hashed arrays and doubly linked lists. I got the idea
that most of my computer career would be about learning new and more
powerful data structures.</simpara>
<simpara id="para_when_i_put_my_ibm_mainfra">When I put my IBM mainframe assembler days to rest, and entered the
brave new world of Perl and other dynamic, modern languages, I was
amazed that the exact opposite was true. These new languages had
boiled everything down to 2 kinds of data collections: hashes (aka
dictionaries, objects, associative arrays, or mappings) and arrays
(aka lists or sequences). That&#8217;s it. If you wanted anything else, you
could build it up from these two types. In practice though, you never
needed to.</simpara>
<simpara id="para_as_i_became_more_familiar">As I became more familiar with these modern languages, I was impressed
that this view of the world was not a shortcut or cheap way out. It was
a primary pillar of strength. If all data was shaped in these simple
ways, then simpler programming seemed imminent.</simpara>
</sect1>
<sect1 id="_what_is_a_yaml">
<title>What is a YAML?</title>
<simpara><emphasis role="strong">YAML</emphasis> (it rhymes with "camel") is a Cross Programming Language, Human
Readable/Meaningful/Editable, Data/Object <emphasis>Serialization Language</emphasis>. In
other words, YAML is a format that lets you put any data object into a
text file and feed it to a Ruby [or Perl or Python or Java] program or
show it to a coworker or email it to your mom, and have all of them be
able to understand and play with it.</simpara>
<simpara id="para_consider_this_yaml_object">Consider this YAML object:</simpara>
<screen>recipients:
  languages:
  - Ruby
  - Python
  - Perl
  - Java
  people: [ Mom, My boss ]
features:
- Cross Programming Language
- Human: [ Readable, Meaningful, Editable ]</screen>
<simpara id="para_if_you_are_an_experienced">If you are an experienced geek, you probably think that YAML is an
acronym for "Yet Another Markup Language". Good guess. Unfortunately,
it&#8217;s wrong!</simpara>
<simpara id="para_yaml_is_a_recursive_acron">YAML is a recursive acronym for "YAML Ain&#8217;t Markup Language". Why?
Because it ain&#8217;t! If you look at Wikipedia, and read the first sentence
of these articles, you&#8217;ll see the difference:</simpara>
<screen>XML: is a ... markup language
JSON: is a ... data interchange format
YAML: is a ... data serialization format</screen>
<simpara id="para_when_the_yaml_project_fir">When the YAML project first got started in 2001, Clark Evans and Oren
Ben-Kiki were trying to make a simpler, friendlier XML. When I joined up
with them, a bit later, we soon realized that what we were making was
not a markup language (a way to markup text data), but instead a
language to store the data structures that were common in our favorite
programming languages. [The O&#8217;Reilly/OSCON Languages]</simpara>
<simpara id="para_unfortunately_we_already">Unfortunately we already had the name "Yet Another Markup Lanugage"
acronym, but like any good group of geekly guys, we were able to
backronym our way out of it.</simpara>
<simpara id="para_when_xml_came_out_people">When XML came out, people tried to push it as far as would go.
Unfortunately it was not at all suited for general data serialization.
For instance, XML represents a tree structure, which can&#8217;t (without some
serious mischief) represent a cyclic graph. That was a deal breaker for
a serialization language.</simpara>
<simpara id="para_xml_also_left_a_bad_taste">XML also left a bad taste in the mouth for things like config files.
Consider Apache config files. They have a great similarity to XML, but
they take a lot of liberties (to abandon strict XML), that make them
actual usable by regular people.</simpara>
<simpara id="para_json_is_also_mentioned_be">JSON is also mentioned because it is actually much closer to YAML than
XML is. (More about that in Chapter 2) JSON is extremely lightweight and
useful for passing around simple data structures. Unfortunately (like
XML) it has no way to represent cyclic data references and it has no way
to represent anything but the most common data types. YAML solves both
of these issues (and a couple others) in order to be able to serialize
any data structures. YAML is also less verbose than JSON.</simpara>
</sect1>
</chapter>
<chapter id="_the_yaml_data_language">
<title>The YAML Data Language</title>
<simpara id="para_coming_soon">Coming soon&#8230;</simpara>
</chapter>
<chapter id="_processing_yaml">
<title>Processing YAML</title>
<simpara id="para_coming_soon">Coming soon&#8230;</simpara>
</chapter>
<chapter id="_the_full_yaml_stack">
<title>The Full YAML Stack</title>
<simpara id="para_coming_soon">Coming soon&#8230;</simpara>
</chapter>
<chapter id="_the_yaml_programming_reference">
<title>The YAML Programming Reference</title>
<simpara id="para_coming_soon">Coming soon&#8230;</simpara>
</chapter>
<glossary id="_glossary">
<title>Glossary</title>
<simpara id="para_yaml_uses_a_number_of_spe">YAML uses a number of specific terms to describe its structure, syntax and the
data it represents. Many of these terms have different synonyms in specific
programming languages. Reading through this glossary is an excellent way to
get a quick overview of YAML.</simpara>
<glossentry id="glossentry-alias">
<glossterm>
Alias
</glossterm>
<glossdef>
<simpara>
        A reference to another <emphasis>node</emphasis> in a YAML <emphasis>document</emphasis>.
        Syntactically this is written with an asterisk followed by an
        identifier. Like this: <userinput>*foo</userinput>. Every alias in a document must be
        preceded by an <emphasis>anchor</emphasis> with the same identifier.
</simpara>
</glossdef>
</glossentry>
<glossentry id="glossentry-anchor">
<glossterm>
Anchor
</glossterm>
<glossdef>
<simpara>
        A name given to a specific node. Syntactically this written with
        an ampersand followed by an identifier. Like this: <userinput>&amp;foo</userinput>. Nodes
        that are named with anchors, may be referenced later in a
        <emphasis>document</emphasis> by an <emphasis>alias</emphasis> node.
</simpara>
</glossdef>
</glossentry>
<glossentry id="glossentry-block">
<glossterm>
Block
</glossterm>
<glossdef>
<simpara>
        A syntactic style of a <emphasis>collection</emphasis> that uses indentation to
        indicate structure and scope.
</simpara>
</glossdef>
</glossentry>
<glossentry id="glossentry-collection">
<glossterm>
Collection
</glossterm>
<glossdef>
<simpara>
        A <emphasis>node</emphasis> that can contain zero or more pieces of data, as
        opposed to a <emphasis>scalar</emphasis> which is exactly one data point.
        <emphasis>Mappings</emphasis> and <emphasis>sequences</emphasis> are YAML collections.
</simpara>
</glossdef>
</glossentry>
<glossentry id="glossentry-directive">
<glossterm>
Directive
</glossterm>
<glossdef>
<simpara>
        A part of a YAML <emphasis>stream</emphasis> that is used to define meta properties
        of the serialization, and is not part of the serialization
        itself. Directives are lines that begin with a percent sign,
        followed by a keyword. Directives apply to the <emphasis>document</emphasis> that
        follows them. <replaceable>%YAML</replaceable> and <replaceable>%TAG</replaceable> are the only two directives
        currently.
</simpara>
</glossdef>
</glossentry>
<glossentry id="glossentry-document">
<glossterm>
Document
</glossterm>
<glossdef>
<simpara>
        The YAML serialization of a complete graph. A document can
        represent a <emphasis>collection</emphasis> or a single <emphasis>scalar</emphasis>.
</simpara>
</glossdef>
</glossentry>
<glossentry id="glossentry-explicit-typing">
<glossterm>
Explicit Typing
</glossterm>
<glossdef>
<simpara>
        Every YAML <emphasis>node</emphasis> has a type. Nodes that are preceded by a <emphasis>tag</emphasis>
        are explicitly typed.
</simpara>
</glossdef>
</glossentry>
<glossentry id="glossentry-flow">
<glossterm>
Flow
</glossterm>
<glossdef>
<simpara>
        A syntactic style of a <emphasis>collection</emphasis> that uses braces to indicate
        structure and scope. It is very similar to the JSON format.
</simpara>
</glossdef>
</glossentry>
<glossentry id="glossentry-implicit-typing">
<glossterm>
Implicit Typing
</glossterm>
<glossdef>
<simpara>
        Every YAML <emphasis>node</emphasis> has a type. Nodes that are <emphasis>not</emphasis> preceded by a
        <emphasis>tag</emphasis> are implicitly typed.
</simpara>
</glossdef>
</glossentry>
<glossentry id="glossentry-mapping">
<glossterm>
Mapping
</glossterm>
<glossdef>
<simpara>
        A <emphasis>collection</emphasis> of zero or more <emphasis>key</emphasis> / <emphasis>value</emphasis> pairs. A
        mapping is the YAML equivalent to a <emphasis>hash</emphasis> in Perl, a
        <emphasis>dictionary</emphasis> in Python, or an <emphasis>object</emphasis> in JavaScript. It is
        also sometimes called an <emphasis>associative array</emphasis>. Two important
        properties of a <emphasis>mapping</emphasis> are that keys are unique, and that
        the pairs are not ordered.
</simpara>
</glossdef>
</glossentry>
<glossentry id="glossentry-node">
<glossterm>
Node
</glossterm>
<glossdef>
<simpara>
         A single, addressable, data point. A <emphasis>vertice</emphasis> on a
         <emphasis>directional cyclic graph</emphasis>. A node may be either a
         <emphasis>collection</emphasis>, a <emphasis>scalar</emphasis> or an <emphasis>alias</emphasis>.
</simpara>
</glossdef>
</glossentry>
<glossentry id="glossentry-scalar">
<glossterm>
Scalar
</glossterm>
<glossdef>
<simpara>
        A <emphasis>node</emphasis> that contains a single value, like a string or a number.
</simpara>
</glossdef>
</glossentry>
<glossentry id="glossentry-sequence">
<glossterm>
Sequence
</glossterm>
<glossdef>
<simpara>
        An ordered <emphasis>collection</emphasis> of zero or more single <emphasis>nodes</emphasis>. A
        sequence is the YAML equivalent to an <emphasis>array</emphasis> in Perl or a
        <emphasis>list</emphasis> in Python.
</simpara>
</glossdef>
</glossentry>
<glossentry id="glossentry-stream">
<glossterm>
Stream
</glossterm>
<glossdef>
<simpara>
        Zero or more YAML <emphasis>documents</emphasis>. A stream is the entire sequence
        of contiguous characters. For example, an entire YAML file on
        disk is considered to be a YAML stream.
</simpara>
</glossdef>
</glossentry>
<glossentry id="glossentry-tag">
<glossterm>
Tag
</glossterm>
<glossdef>
<simpara>
        A string that indicates the type of a given <emphasis>node</emphasis>. A tag is
        written with an exclamation point followed by a tag string.
        Examples are <replaceable>!!int</replaceable> and !object:Foo'.
</simpara>
</glossdef>
</glossentry>
</glossary>
<chapter id="para_tag">
<title>YAML Projects Overview</title>
<simpara id="para_coming_soon">Coming soon&#8230;</simpara>
</chapter>
<chapter id="_yaml_in_the_wild">
<title>YAML in the Wild</title>
<simpara id="para_coming_soon">Coming soon&#8230;</simpara>
</chapter>
<index id="_index">
<title>Index</title>
<colophon id="_colophon">
<simpara id="para_coming_soon">Coming soon&#8230;</simpara>
</colophon>
</index>
</book>
